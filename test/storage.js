/**
 * @file
 * Unit test setup of translation plugin.
 */
'use strict';

var config = require(__dirname + '/config.json');
var app = null;
var setup = function setup() {
  if (!app) {
    // Load config file.
    var config = require(__dirname + '/../config.json');

    // Configure the plugins.
    var plugins = [
      {
        packagePath: './../plugins/bus'
      },
      {
        packagePath: './../plugins/storage',
        paths: config.paths
      }
    ];

    app = setupArchitect(plugins, config);
  }

  return app;
};

it('Save fictive config file and load it', function () {
  return setup().then(function (app) {
    app.services.storage.save('config', 'test', { test: 'test' });
    var data = app.services.storage.load('config', 'test');

    data.should.be.a.Object();
    data.should.have.property('test');
    data['test'].should.equal('test');
  });
});

it('Save data to offline storage and append more data to it', function () {
  return setup().then(function (app) {
    app.services.storage.append('offline', 'test', { test1: 'test' });
    app.services.storage.append('offline', 'test', { test2: 'test' });

    var data = app.services.storage.load('offline', 'test');

    data.should.be.a.Array();
    data.should.have.length(2);
    data[0].should.have.property('test1');
    data[0].test1.should.equal('test');
    data[1].should.have.property('test2');
    data[1].test2.should.equal('test');
  });
});

it('Remove test files generated by the tests', function () {
  return setup().then(function (app) {
    try {
      app.services.storage.remove('config', 'test');
      var data = app.services.storage.load('config', 'test');
      assert(false, 'File should not exists in config storage');
    } catch (err) {
      if (err.code === 'ENOENT') {
        assert(true);
      } else {
        // This could be the assert above, so re-throw it.
        throw err;
      }
    }

    try {
      app.services.storage.remove('offline', 'test');
      var data = app.services.storage.load('offline', 'test');
      assert(false, 'File should not exists in off-line storage');
    } catch (err) {
      if (err.code === 'ENOENT') {
        assert(true);
      } else {
        // This could be the assert above, so re-throw it.
        throw err;
      }
    }
  });
});

it('Teardown', function (done) {
  setup().then(function (app) {
    app.destroy();
    done();
  }, done);
});
